#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <stdbool.h>

//1.a.
int nr_divizori(int n)
{
    int nr = 2;
    int i;
    int radical = sqrt(n);

    for(i = 2; i <= radical; i++)
    {
        if(n%i==0) nr+=2;
    }

    if(radical == sqrt(n)) nr--;

    return nr;
}

int suma_divizori(int n)
{
    int suma = 1+n;
    int i;
    int radical = sqrt(n);

    for(i = 2; i <= radical; i++)
    {
        if(n%i==0) suma = suma + i + n/i;
    }

    if(radical == sqrt(n)) suma = suma - radical;

    return suma;
}

//1.b.
bool prim (unsigned long long x)
{
    int i;
    if (x%2==0) return false;
    for(i = 3; i <= sqrt(x); i+=2)
        if(x%i==0) return false;

    return true;
}

unsigned long long invers (unsigned long long nr)
{
    unsigned long long inver;
    inver = 0;

    while(nr)
    {
        inver = inver*10 + nr%10;
        nr = nr/10;
    }

    return inver;
}

//2.
bool palindrom (unsigned long long x)
{
    return (invers(x) == x);
}

//3.
void fara_cifra (unsigned int n, int c)
{
   // unsigned int nou = 0;


    return;
}

//4.a.
int* cifre (int *c, unsigned long long n)
{
    int i;
    c = (int*)malloc(10*sizeof(int));

    for (i = 0; i < 10; i++) *(c+i) = 0;

    int rest;
    while(n!=0)
    {
        rest = n%10;
        *(c+rest)+=1;
        n/=10;
    }

    return c;

}

//4.b.
int minim (unsigned long long n)
{
    unsigned long long min;

    //

    return min;
}

//5.a.
void citire_vector(int *v, int n)
{
    int i;

    for(i = 0; i < n; i++)
    {
        scanf("%d", &v[i]);
    }

}

//5.a.
void afisare_vector(int *v, int n)
{
    int i;

    for(i = 0; i < n; i++)
    {
        printf("%d ", v[i]);
    }

}

//5.b.
int frecventa (int v[], int n, int x, int i, int j)
{
    int parcurgere;
    int count = 0;

    for (parcurgere = i; parcurgere <= j; parcurgere++ )
    {
        if(v[parcurgere] == x) count++;
    }

    return count;
}

//5.c.
void distincte (int v[], int n)
{
    //
}

//6.
void max_sir(FILE *f, int *max, int *cate)
{

    int actual;
    *max = *cate = 0;

    while(!feof(f))
    {
        fscanf(f,"%d", &actual);
        if(feof(f)) break;

        if(actual == *max) (*cate)++;
        if(actual > *max)
        {
            *max = actual;
            *cate = 1;
        }
    }

}

int main()
{

//File Stream

    //Declarare read & write.
    FILE *citire = fopen("date.in", "r");   //Deschinde fisierul "date.in".
    FILE *scriere = fopen("date.out", "w"); //Creeaza fisierul "date.out".

    //Verificare daca s-au citit bine.
    if(citire == NULL)
        printf("Fisierul .in nu poate fi deschis.");
    if(scriere == NULL)
        printf("Fisierul .out nu poate fi creat.");

/*
    int x;
    int *p = NULL;
    scanf("%d", &x);
    int v[x];
*/




    return 0;
}
